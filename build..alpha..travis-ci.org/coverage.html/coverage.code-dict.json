{"/home/travis/build/npmtest/node-npmtest-require/test.js":"/* istanbul instrument in package npmtest_require */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-require/lib.npmtest_require.js":"/* istanbul instrument in package npmtest_require */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_require = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_require = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-require/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-require && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_require */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_require\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_require.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_require.rollup.js'] =\n            local.assetsDict['/assets.npmtest_require.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_require.__dirname + '/lib.npmtest_require.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-require/node_modules/require/compiler.js":"var fs = require('fs')\nvar path = require('path')\nvar extend = require('std/extend')\nvar each = require('std/each')\nvar getCode = require('./lib/getCode')\nvar resolve = require('./lib/resolve')\nvar getRequireStatements = require('./lib/getRequireStatements')\n\nmodule.exports = {\n\tcompile: compileFile,\n\tcompileHTML: compileHTMLFile,\n\tcompileCode: compileCode\n}\n\n/* api\n *****/\nfunction compileFile(filePath, opts) {\n\tfilePath = path.resolve(filePath)\n\topts = extend(opts, { basePath:path.dirname(filePath), toplevel:true })\n\tvar code = getCode(filePath)\n\treturn _compile(code, opts, filePath)\n}\n\nfunction compileCode(code, opts) {\n\topts = extend(opts, { basePath:process.cwd(), toplevel:true })\n\treturn _compile(code, opts, '<code passed into compiler.compile()>')\n}\n\nfunction compileHTMLFile(filePath, opts) {\n\tvar html = fs.readFileSync(filePath).toString()\n\twhile (match = html.match(/<script src=\"\\/require\\/([\\/\\w\\.]+)\"><\\/script>/)) {\n\t\tvar js = compileFile(match[1].toString(), opts)\n\t\t\n\t\tvar BACKREFERENCE_WORKAROUND = '____________backreference_workaround________'\n\t\tjs = js.replace('\\$\\&', BACKREFERENCE_WORKAROUND)\n\t\thtml = html.replace(match[0], '<script>'+js+'</script>')\n\t\thtml = html.replace(BACKREFERENCE_WORKAROUND, '\\$\\&')\n\t}\n\treturn html\n}\n\n\nvar _compile = function(code, opts, mainModule) {\n\tvar code = 'var __require__ = {}, require=function(){}\\n' + _compileModule(code, opts.basePath, mainModule)\n\tif (opts.minify === false) { return code } // TODO use uglifyjs' beautifier?\n\n\tvar UglifyJS = require('uglify-js')\n\tvar result = UglifyJS.minify(code, {\n\t\tfromString:true,\n\t\tmangle:true,\n\t\toutput: {\n\t\t\t// http://lisperator.net/uglifyjs/codegen\n\t\t\tindent_start  : 0,     // start indentation on every line (only when `beautify`)\n\t\t\tindent_level  : 4,     // indentation level (only when `beautify`)\n\t\t\tquote_keys    : false, // quote all keys in object literals?\n\t\t\tspace_colon   : true,  // add a space after colon signs?\n\t\t\tascii_only    : false, // output ASCII-safe? (encodes Unicode characters as ASCII)\n\t\t\tinline_script : false, // escape \"</script\"?\n\t\t\twidth         : 80,    // informative maximum line width (for beautified output)\n\t\t\tmax_line_len  : 200, // maximum line length (for non-beautified output)\n\t\t\tie_proof      : true,  // output IE-safe code?\n\t\t\tbeautify      : false, // beautify output?\n\t\t\tsource_map    : null,  // output a source map\n\t\t\tbracketize    : false, // use brackets every time?\n\t\t\tcomments      : false, // output comments?\n\t\t\tsemicolons    : true  // use semicolons to separate statements? (otherwise, newlines)\n\t\t},\n\t\tcompress: {\n\t\t\t// http://lisperator.net/uglifyjs/compress\n\t\t\tsequences     : true,  // join consecutive statemets with the “comma operator”\n\t\t\tproperties    : true,  // optimize property access: a[\"foo\"] → a.foo\n\t\t\tdead_code     : true,  // discard unreachable code\n\t\t\tdrop_debugger : true,  // discard “debugger” statements\n\t\t\tunsafe        : false, // some unsafe optimizations (see below)\n\t\t\tconditionals  : true,  // optimize if-s and conditional expressions\n\t\t\tcomparisons   : true,  // optimize comparisons\n\t\t\tevaluate      : true,  // evaluate constant expressions\n\t\t\tbooleans      : true,  // optimize boolean expressions\n\t\t\tloops         : true,  // optimize loops\n\t\t\tunused        : true,  // drop unused variables/functions\n\t\t\thoist_funs    : true,  // hoist function declarations\n\t\t\thoist_vars    : false, // hoist variable declarations\n\t\t\tif_return     : true,  // optimize if-s followed by return/continue\n\t\t\tjoin_vars     : true,  // join var declarations\n\t\t\tcascade       : true,  // try to cascade `right` into `left` in sequences\n\t\t\tside_effects  : true,  // drop side-effect-free statements\n\t\t\twarnings      : false, // warn about potentially dangerous optimizations/code\n\t\t\tglobal_defs   : {}     // global definitions\n\t\t}\n\t})\n\t// also see result.map\n\treturn result.code\n}\n\n/* util\n ******/\nvar _compileModule = function(code, pathBase, mainModule) {\n\tvar modules = [mainModule]\n\t_replaceRequireStatements(mainModule, code, modules, pathBase)\n\tcode = _concatModules(modules)\n\tcode = _minifyRequireStatements(code, modules)\n\treturn code\n}\n\nvar _minifyRequireStatements = function(code, modules) {\n\teach(modules, function(modulePath, i) {\n\t\tvar escapedPath = modulePath.replace(/\\//g, '\\\\/').replace('(','\\\\(').replace(')','\\\\)')\n\t\tvar regex = new RegExp('__require__\\\\[\"'+ escapedPath +'\"\\\\]', 'g')\n\t\t\n\t\tcode = code.replace(regex, '__require__[\"_'+ i +'\"]')\n\t})\n\treturn code\n}\n\nvar _replaceRequireStatements = function(modulePath, code, modules, pathBase) {\n\tvar requireStatements = getRequireStatements(code)\n\n\tif (!requireStatements.length) {\n\t\tmodules[modulePath] = code\n\t\treturn\n\t}\n\n\teach(requireStatements, function(requireStatement) {\n\t\tvar subModulePath = resolve.requireStatement(requireStatement, modulePath)\n\n\t\tif (!subModulePath) {\n\t\t\tthrow new Error(\"Require Compiler Error: Cannot find module '\"+ rawModulePath +\"' (in '\"+ modulePath +\"')\")\n\t\t}\n\n\t\tcode = code.replace(requireStatement, '__require__[\"' + subModulePath + '\"].exports')\n\t\t\n\t\tif (!modules[subModulePath]) {\n\t\t\tmodules[subModulePath] = true\n\t\t\tvar newPathBase = path.dirname(subModulePath)\n\t\t\tvar newModuleCode = getCode(subModulePath)\n\t\t\t_replaceRequireStatements(subModulePath, newModuleCode, modules, newPathBase)\n\t\t\tmodules.push(subModulePath)\n\t\t}\n\t})\n\n\tmodules[modulePath] = code\n}\n\nvar _concatModules = function(modules) {\n\tvar getClosuredModule = function(modulePath) {\n\t\treturn [\n\t\t\t';(function() {',\n\t\t\t'\t// ' + modulePath,\n\t\t\t'\tvar module = __require__[\"'+modulePath+'\"] = {exports:{}}, exports = module.exports;',\n\t\t\tmodules[modulePath],\n\t\t\t'})()'\n\t\t].join('\\n')\n\t}\n\n\tvar moduleDefinitions = []\n\tfor (var i=1, modulePath; modulePath = modules[i]; i++) {\n\t\tmoduleDefinitions.push(getClosuredModule(modulePath))\n\t}\n\tmoduleDefinitions.push(getClosuredModule(modules[0])) // __main__\n\n\treturn moduleDefinitions.join('\\n\\n')\n}\n","/home/travis/build/npmtest/node-npmtest-require/node_modules/require/lib/getCode.js":"var fs = require('fs')\n\nmodule.exports = function readCode(filePath) {\n\tif (!filePath.match(/\\.js$/)) { filePath += '.js' }\n\treturn fs.readFileSync(filePath).toString()\n}","/home/travis/build/npmtest/node-npmtest-require/node_modules/require/lib/resolve.js":"var path = require('path')\nvar fs = require('fs')\nvar existsSync = fs.existsSync || path.existsSync\n\nvar _nodePaths = (process.env.NODE_PATH ? process.env.NODE_PATH.split(':') : [])\n_nodePaths.push(process.cwd())\n\nmodule.exports = {\n\tpath: resolvePath,\n\t_nodePaths:_nodePaths,\n\trequireStatement: resolveRequireStatement\n}\n\nfunction resolvePath(searchPath, pathBase) {\n\tif (searchPath[0] == '.') {\n\t\t// relative path, e.g. require(\"./foo\")\n\t\treturn _findModuleMain(path.resolve(pathBase, searchPath))\n\t}\n\t\n\tvar searchParts = searchPath.split('/')\n\tvar componentName = searchParts[searchParts.length - 1]\n\tvar name = searchParts.shift()\n\tvar rest = searchParts.join('/')\n\t\n\t// npm-style path, e.g. require(\"npm\").\n\t// Climb parent directories in search for \"node_modules\"\n\tvar modulePath = _findModuleMain(path.resolve(pathBase, 'node_modules', searchPath))\n\tif (modulePath) { return modulePath }\n\n\tif (pathBase != '/') {\n\t\t// not yet at the root - keep climbing!\n\t\treturn resolvePath(searchPath, path.resolve(pathBase, '..'))\n\t}\n\t\n\treturn ''\n}\n\nvar _pathnameGroupingRegex = /require\\s*\\(['\"]([\\w\\/\\.-]*)['\"]\\)/\nfunction resolveRequireStatement(requireStmnt, currentPath) {\n\tvar rawPath = requireStmnt.match(_pathnameGroupingRegex)[1]\n\tvar resolvedPath = resolvePath(rawPath, path.dirname(currentPath))\n\t\n\tif (!resolvedPath && rawPath[0] != '.' && rawPath[0] != '/') {\n\t\tfor (var i=0; i<_nodePaths.length; i++) {\n\t\t\tresolvedPath = _findModuleMain(path.resolve(_nodePaths[i], rawPath))\n\t\t\tif (resolvedPath) { break }\n\t\t}\n\t}\n\t\n\tif (!resolvedPath) { throw 'Could not resolve \"'+rawPath+'\" in \"'+currentPath+'\"' }\n\treturn resolvedPath\n}\n\nfunction _findModuleMain(absModulePath, tryFileName) {\n\tvar foundPath = ''\n\tfunction attempt(aPath) {\n\t\tif (foundPath) { return }\n\t\tif (existsSync(aPath)) { foundPath = aPath }\n\t}\n\tattempt(absModulePath + '.js')\n\ttry {\n\t\tvar package = JSON.parse(fs.readFileSync(absModulePath + '/package.json').toString())\n\t\tattempt(path.resolve(absModulePath, package.main+'.js'))\n\t\tattempt(path.resolve(absModulePath, package.main))\n\t} catch(e) {}\n\tattempt(absModulePath + '/index.js')\n\n\tif (tryFileName) { attempt(absModulePath + '/' + tryFileName + '.js') }\n\treturn foundPath\n}\n\n\n","/home/travis/build/npmtest/node-npmtest-require/node_modules/require/lib/getRequireStatements.js":"module.exports = getRequireStatements\n\nvar _globalRequireRegex = /require\\s*\\(['\"][\\w\\/\\.-]*['\"]\\)/g\nfunction getRequireStatements(code) {\n\treturn code.match(_globalRequireRegex) || []\n}\n","/home/travis/build/npmtest/node-npmtest-require/node_modules/require/server.js":"var http = require('http')\nvar fs = require('fs')\nvar path = require('path')\nvar extend = require('std/extend')\nvar isObject = require('std/isObject')\nvar map = require('std/map')\nvar each = require('std/each')\nvar getDependencyLevels = require('./lib/getDependencyLevels')\nvar getRequireStatements = require('./lib/getRequireStatements')\nvar getCode = require('./lib/getCode')\nvar resolve = require('./lib/resolve')\n\nmodule.exports = {\n\tlisten: listen,\n\tmount: mount,\n\tconnect: connect,\n\tisRequireRequest: isRequireRequest,\n\thandleRequest: handleRequest\n}\n\nfunction listen(portOrOpts) {\n\tvar _opts = (isObject(portOrOpts) ? portOrOpts : { port:portOrOpts || 1234 })\n\topts.handleAllRequests = true\n\tmount(http.createServer(), _opts).listen(opts.port, opts.host)\n}\n\nfunction mount(server, _opts) {\n\tsetOpts(_opts)\n\treturn server.on('request', _checkRequest)\n}\n\nfunction connect(opts) {\n\tsetOpts(opts)\n\treturn _checkRequest\n}\n\nfunction _checkRequest(req, res, next) {\n\tif (isRequireRequest(req) || opts.handleAllRequests) {\n\t\thandleRequest(req, res)\n\t} else {\n\t\tnext && next()\n\t}\n}\n\nfunction isRequireRequest(req) {\n\treturn req.url.substr(1, opts.root.length) == opts.root\n}\n\n/* options\n *********/\nvar opts = {\n\tpath: process.cwd(),\n\troot: 'require',\n\tport: null,\n\thost: null\n}\nfunction setOpts(_opts) {\n\topts = extend(_opts, opts)\n\tif (opts.path) {\n\t\tresolve._nodePaths.push(opts.path)\n\t}\n}\nfunction getUrlBase() {\n\tvar basePort = (!opts.usePagePort && opts.port)\n\tif (opts.host && basePort) {\n\t\treturn '//' + opts.host + ':' + basePort + '/' + opts.root + '/'\n\t} else {\n\t\treturn '/' + opts.root + '/'\n\t}\n}\n\n/* request handlers\n ******************/\nfunction handleRequest(req, res) {\n\tvar reqPath = _normalizeURL(req.url).substr(opts.root.length + 2)\n\tif (reqPath.match(/\\.js$/)) {\n\t\t_handleModuleRequest(reqPath, res)\n\t} else {\n\t\t_handleMainModuleRequest(reqPath, req, res)\n\t}\n\n\tfunction _normalizeURL(url) {\n\t\treturn url.replace(/\\?.*/g, '').replace(/\\/js$/, '.js')\n\t}\n}\n\nfunction _handleMainModuleRequest(reqPath, req, res) {\n\tvar mainModulePath = resolve.path('./' + reqPath, opts.path)\n\tif (!mainModulePath) { return _sendError(res, 'Could not find module \"'+reqPath+'\" from \"'+opts.path+'\"') }\n\n\ttry { var dependencyTree = getDependencyLevels(mainModulePath) }\n\tcatch(err) { return _sendError(res, 'in getDependencyLevels: ' + (err.message || err)) }\n\t\n\tvar userAgent = req.headers['user-agent']\n\tvar isMobile = userAgent.match('iPad') || userAgent.match('iPod') || userAgent.match('iPhone') || userAgent.match('Android')\n\t\n\tvar response = isMobile ? _getMobilePayload() : _getNormalPayload()\n\t\n\tres.writeHead(200, { 'Cache-Control':'no-cache', 'Expires':'Fri, 31 Dec 1998 12:00:00 GMT', 'Content-Length':response.length, 'Content-Type':'text/javascript' })\n\tres.end(response)\n\n\tfunction _getMobilePayload() {\n\t\tvar result = ['__require__={loadNextModule:function(){},onModuleLoaded:function(){}}']\n\t\teach(dependencyTree, function(level) {\n\t\t\teach(level, function(dependency) {\n\t\t\t\tresult.push(';(function(){ '+_getModuleCode(res, dependency)+' }());')\n\t\t\t})\n\t\t})\n\t\treturn new Buffer(result.join('\\n'))\n\t}\n\t\n\tfunction _getNormalPayload() {\n\t\tvar paramsString = map([getUrlBase(), dependencyTree], JSON.stringify).join(',\\n\\t\\t')\n\t\treturn new Buffer('\\t('+clientBootstrapFn.toString()+')(\\n\\t\\t'+paramsString+'\\n\\t)')\t\n\t\t\n\t\tfunction clientBootstrapFn(urlBase, levels) {\n\t\t\t// This function gets sent to the client as toString\n\t\t\t__require__ = {\n\t\t\t\tloadNextLevel: loadNextLevel,\n\t\t\t\tonModuleLoaded: onModuleLoaded\n\t\t\t}\n\n\t\t\tvar currentLevel = null\n\t\t\tloadNextLevel()\n\n\t\t\tfunction loadNextLevel() {\n\t\t\t\tif (!levels.length) { return } // all done!\n\t\t\t\tcurrentLevel = levels.shift()\n\t\t\t\tvar head = document.getElementsByTagName('head')[0]\n\t\t\t\tfor (var i=0; i<currentLevel.length; i++) {\n\t\t\t\t\t// var url = location.protocol + '//' + location.host + urlBase + currentLevel[i]\n\t\t\t\t\tvar url = urlBase + currentLevel[i]\n\t\t\t\t\thead.appendChild(document.createElement('script')).src = url\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction onModuleLoaded() {\n\t\t\t\tcurrentLevel.pop()\n\t\t\t\tif (currentLevel.length == 0) {\n\t\t\t\t\tloadNextLevel()\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\t\n\t}\n}\n\nfunction _asString(fn) { return fn.toString() }\n\nfunction _handleModuleRequest(reqPath, res) {\n\ttry { var code = _getModuleCode(res, reqPath) }\n\tcatch(err) { return _sendError(res, err.stack || err) }\n\n\tcode += '\\n\\n'\n\t\n\tvar buf = new Buffer(code)\n\tres.writeHead(200, { 'Cache-Control':'no-cache', 'Expires':'Fri, 31 Dec 1998 12:00:00 GMT', 'Content-Length':buf.length, 'Content-Type':'text/javascript' })\n\tres.end(buf)\n}\n\nfunction _getModuleCode(res, reqPath) {\n\tvar code = getCode(reqPath)\n\tvar requireStatements = getRequireStatements(code)\n\n\ttry {\n\t\teach(requireStatements, function(requireStmnt) {\n\t\t\tvar depPath = resolve.requireStatement(requireStmnt, reqPath)\n\t\t\tif (!depPath) { throw 'Could not resolve module' }\n\t\t\tcode = code.replace(requireStmnt, '__require__[\"'+depPath+'\"]')\n\t\t})\n\t} catch(e) {\n\t\t_sendError(res, e.message || e)\n\t}\n\n\tvar _closureStart = ';(function(){'\n\tvar _moduleDef = 'var module={exports:{}},exports=module.exports;/*FILE BEGIN*/ '\n\tvar _closureEnd = '/*FILE END*/__require__[\"'+reqPath+'\"]=module.exports; __require__.onModuleLoaded()\\n})()'\n\treturn _closureStart + _moduleDef + code + // all on the first line to make error line number reports correct\n\t\t'\\n' + _closureEnd\n}\n\nfunction _sendError(res, msg) {\n\tif (msg) { msg = msg.replace(/\\n/g, '\\\\n').replace(/\"/g, '\\\\\"') }\n\tres.writeHead(200)\n\tres.end('alert(\"error: ' + msg + '\")')\n}\n","/home/travis/build/npmtest/node-npmtest-require/node_modules/require/lib/getDependencyLevels.js":"var each = require('std/each')\nvar getCode = require('./getCode')\nvar getRequireStatements = require('./getRequireStatements')\nvar resolve = require('./resolve')\n\nmodule.exports = getDependencyLevels\n\nfunction getDependencyLevels(mainModulePath) {\n\tvar leaves = []\n\tvar root = []\n\troot.isRoot = true\n\troot.path = mainModulePath\n\t_buildDependencyTreeOf(root)\n\n\tvar levels = []\n\tvar seenPaths = {}\n\t_buildLevel(leaves)\n\n\treturn levels\n\n\t// builds full dependency tree, noting every dependency of every node\n\tfunction _buildDependencyTreeOf(node) {\n\t\tvar requireStatements = getRequireStatements(getCode(node.path))\n\t\tif (requireStatements.length == 0) {\n\t\t\treturn leaves.push(node)\n\t\t}\n\t\teach(requireStatements, function(requireStatement) {\n\t\t\tvar childNode = []\n\t\t\tchildNode.path = resolve.requireStatement(requireStatement, node.path)\n\t\t\tchildNode.parent = node\n\t\t\tnode.push(childNode)\n\t\t\t_buildDependencyTreeOf(childNode)\n\t\t})\n\t\tnode.waitingForNumChildren = node.length\n\t}\n\n\t// builds a list of dependency levels, where nodes in each level is dependent only on nodes in levels below it\n\t// the dependency levels allow for parallel loading of every file in any given level\n\tfunction _buildLevel(nodes) {\n\t\tvar level = []\n\t\tlevels.push(level)\n\t\tvar parents = []\n\t\teach(nodes, function(node) {\n\t\t\tif (!seenPaths[node.path]) {\n\t\t\t\tseenPaths[node.path] = true\n\t\t\t\tlevel.push(node.path)\n\t\t\t}\n\t\t\tif (node.isRoot) { return }\n\n\t\t\tnode.parent.waitingForNumChildren -= 1\n\n\t\t\tif (node.parent.waitingForNumChildren == 0) {\n\t\t\t\tparents.push(node.parent)\n\t\t\t}\n\t\t})\n\t\tif (!parents.length) { return }\n\t\t_buildLevel(parents)\n\t}\n}\n","/home/travis/build/npmtest/node-npmtest-require/node_modules/require/bin/require-command.js":"#!/usr/bin/env node\n\nvar path = require('path'),\n\tserver = require('../server'),\n\tcompiler = require('../compiler')\n\nvar opts = {\n\tport:    1234,\n\thost:    'localhost',\n\tcommand: null,\n\tpath:    null\n}\n\nvar args = [].slice.call(process.argv, 2)\n\nopts.command = args.shift()\nopts.path = path.resolve(args.shift())\n\nwhile (args.length) {\n\tvar arg = args.shift()\n\tswitch(arg) {\n\t\tcase '--port':\n\t\t\topts.port = args.shift()\n\t\t\tbreak\n\t\tcase '--host':\n\t\t\topts.host = args.shift()\n\t\t\tbreak\n\t\tcase '--root':\n\t\t\topts.root = args.shift()\n\t\t\tbreak\n\t\tcase '--usePagePort':\n\t\t\tif (args[0] && args[0][0] != '-') {\n\t\t\t\tconsole.log('Unexpected value for --usePagePort flag', args[0])\n\t\t\t\tprocess.exit(1)\n\t\t\t}\n\t\t\topts.usePagePort = true\n\t\t\tbreak\n\t\tdefault:\n\t\t\tconsole.log('Unknown option', arg)\n\t\t\tprocess.exit(1)\n\t\t\tbreak\n\t}\n}\n\nswitch (opts.command) {\n\tcase 'serve':\n\t\tif (!opts.path) {\n\t\t\tconsole.log('Specify a path to serve from, e.g. require serve ./example')\n\t\t\tprocess.exit(1)\n\t\t}\n\t\tserver.listen(opts)\n\t\tconsole.log('serving from', opts.path, 'on', 'http://'+opts.host+':'+opts.port)\n\t\tbreak\n\tcase 'compile':\n\t\tif (!opts.path) {\n\t\t\tconsole.log('Specify a single file to compile, e.g. require compile ./path/to/file.js')\n\t\t\tprocess.exit(1)\n\t\t}\n\t\tconsole.log(compiler.compile(opts.path))\n\t\tbreak\n\tdefault:\n\t\tif (opts.command) {\n\t\t\tconsole.log('Unknown command', '\"' + opts.command + '\".', 'Try \"require serve\" or \"require compile\"')\n\t\t} else {\n\t\t\tconsole.log('You need to give a command, e.g. \"require serve\" or \"require compile\"')\n\t\t}\n\t\tprocess.exit(1)\n}\n\n"}